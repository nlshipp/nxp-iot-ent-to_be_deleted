/*
* Copyright 2022 NXP
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions are met:
*
* * Redistributions of source code must retain the above copyright
*   notice, this list of conditions and the following disclaimer.
*
* * Redistributions in binary form must reproduce the above copyright
*   notice, this list of conditions and the following disclaimer in the
*   documentation and/or other materials provided with the distribution.
*
* * Neither the name of the copyright holder nor the
*   names of its contributors may be used to endorse or promote products
*   derived from this software without specific prior written permission.
*
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
* ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
* WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
* DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS AND CONTRIBUTORS BE LIABLE
* FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
* (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
* LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
* SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
*/

#include "precomp.h"
#include "imxpepioctl.h"
#include "imxpephw.h"
#include "imxpep.h"

#if DBG

LARGE_INTEGER        DriverStartTime;

#undef MAKECASE
#undef MAKEDEFAULT
#define MAKECASE(Value) case Value:  return #Value;
#define MAKEDEFAULT(Message) default: return"!!! "Message" name unknown !!!";

/*++
Routine Description:
    Converts input value to a string.
Argument:
    i  input value
Return Value:
    Pointer to the string
--*/
_Use_decl_annotations_
const char* Dbg_GetPpmNotifyName(ULONG i) {

    switch (i) {
        MAKECASE(PEP_NOTIFY_PPM_QUERY_CAPABILITIES)
        MAKECASE(PEP_NOTIFY_PPM_IDLE_EXECUTE)
        MAKECASE(PEP_NOTIFY_PPM_IDLE_COMPLETE)
        MAKECASE(PEP_NOTIFY_PPM_IS_PROCESSOR_HALTED)
        MAKECASE(PEP_NOTIFY_PPM_INITIATE_WAKE)
        MAKECASE(PEP_NOTIFY_PPM_QUERY_FEEDBACK_COUNTERS)
        MAKECASE(PEP_NOTIFY_PPM_FEEDBACK_READ)
        MAKECASE(PEP_NOTIFY_PPM_QUERY_PERF_CAPABILITIES)
        MAKECASE(PEP_NOTIFY_PPM_PERF_CONSTRAINTS)
        MAKECASE(PEP_NOTIFY_PPM_PERF_SET)
        MAKECASE(PEP_NOTIFY_PPM_PARK_SELECTION)
        MAKECASE(PEP_NOTIFY_PPM_CST_STATES)
        MAKECASE(PEP_NOTIFY_PPM_QUERY_PLATFORM_STATES)
        MAKECASE(PEP_NOTIFY_PPM_QUERY_IDLE_STATES_V2)
        MAKECASE(PEP_NOTIFY_PPM_QUERY_PLATFORM_STATE)
        MAKECASE(PEP_NOTIFY_PPM_TEST_IDLE_STATE)
        MAKECASE(PEP_NOTIFY_PPM_IDLE_PRE_EXECUTE)
        MAKECASE(PEP_NOTIFY_PPM_UPDATE_PLATFORM_STATE)
        MAKECASE(PEP_NOTIFY_PPM_QUERY_PLATFORM_STATE_RESIDENCIES)
        MAKECASE(PEP_NOTIFY_PPM_QUERY_VETO_REASONS)
        MAKECASE(PEP_NOTIFY_PPM_QUERY_VETO_REASON)
        MAKECASE(PEP_NOTIFY_PPM_ENUMERATE_BOOT_VETOES)
        MAKECASE(PEP_NOTIFY_PPM_QUERY_COORDINATED_STATE_NAME)
        MAKECASE(PEP_NOTIFY_PPM_QUERY_PROCESSOR_STATE_NAME)
        MAKECASE(PEP_NOTIFY_PPM_QUERY_COORDINATED_STATES)
        MAKECASE(PEP_NOTIFY_PPM_QUERY_COORDINATED_DEPENDENCY)
        MAKECASE(PEP_NOTIFY_PPM_PARK_SELECTION_V2)
        MAKECASE(PEP_NOTIFY_PPM_PARK_MASK)
        MAKECASE(PEP_NOTIFY_PPM_PERF_CHECK_COMPLETE)
        MAKECASE(PEP_NOTIFY_PPM_LPI_SUPPORTED)
        MAKECASE(PEP_NOTIFY_PPM_LPI_PROCESSOR_STATES)
        MAKECASE(PEP_NOTIFY_PPM_LPI_COORDINATED_STATES)
        MAKECASE(PEP_NOTIFY_PPM_LPI_PRE_EXECUTE)
        MAKECASE(PEP_NOTIFY_PPM_LPI_COMPLETE)
        MAKECASE(PEP_NOTIFY_PPM_ENTER_SYSTEM_STATE)
        MAKECASE(PEP_NOTIFY_PPM_RESUME_FROM_SYSTEM_STATE)
        MAKECASE(PEP_NOTIFY_PPM_QUERY_DISCRETE_PERF_STATES)
        MAKECASE(PEP_NOTIFY_PPM_QUERY_DOMAIN_INFO)
        MAKECASE(PEP_NOTIFY_PPM_PERF_SET_STATE)
        MAKEDEFAULT("PEP PPM Notify ID")
    }
}

/* Convert Device Platform Notification state enum into string */
_Use_decl_annotations_
const char* Dbg_GetDpmNotifyName(ULONG i) {
    switch (i) {
        MAKECASE(PEP_DPM_PREPARE_DEVICE)
        MAKECASE(PEP_DPM_ABANDON_DEVICE)
        MAKECASE(PEP_DPM_REGISTER_DEVICE)
        MAKECASE(PEP_DPM_UNREGISTER_DEVICE)
        MAKECASE(PEP_DPM_DEVICE_POWER_STATE)
        MAKECASE(PEP_DPM_WORK)
        MAKECASE(PEP_DPM_POWER_CONTROL_REQUEST)
        MAKECASE(PEP_DPM_POWER_CONTROL_COMPLETE)
        MAKECASE(PEP_DPM_SYSTEM_LATENCY_UPDATE)
        MAKECASE(PEP_DPM_DEVICE_STARTED)
        MAKECASE(PEP_DPM_NOTIFY_COMPONENT_IDLE_STATE)
        MAKECASE(PEP_DPM_REGISTER_DEBUGGER)
        MAKECASE(PEP_DPM_REGISTER_CRASHDUMP_DEVICE)
        MAKECASE(PEP_DPM_DEVICE_IDLE_CONSTRAINTS)
        MAKECASE(PEP_DPM_COMPONENT_IDLE_CONSTRAINTS)
        MAKECASE(PEP_DPM_QUERY_COMPONENT_PERF_CAPABILTIES)
        MAKECASE(PEP_DPM_QUERY_COMPONENT_PERF_SET)
        MAKECASE(PEP_DPM_QUERY_COMPONENT_PERF_SET_NAME)
        MAKECASE(PEP_DPM_QUERY_COMPONENT_PERF_STATES)
        MAKECASE(PEP_DPM_REGISTER_COMPONENT_PERF_STATES)
        MAKECASE(PEP_DPM_REQUEST_COMPONENT_PERF_STATE)
        MAKECASE(PEP_DPM_QUERY_CURRENT_COMPONENT_PERF_STATE)
        MAKECASE(PEP_DPM_QUERY_DEBUGGER_TRANSITION_REQUIREMENTS)
        MAKECASE(PEP_DPM_QUERY_SOC_SUBSYSTEM_COUNT)
        MAKECASE(PEP_DPM_QUERY_SOC_SUBSYSTEM)
        MAKECASE(PEP_DPM_RESET_SOC_SUBSYSTEM_ACCOUNTING)
        MAKECASE(PEP_DPM_QUERY_SOC_SUBSYSTEM_BLOCKING_TIME)
        MAKECASE(PEP_DPM_QUERY_SOC_SUBSYSTEM_METADATA)
        MAKEDEFAULT("PEP DPM Notify ID")
    }
}

/* Convert Device Platform Notification state enum into string */
_Use_decl_annotations_
const char* Dbg_GetAcpiNotifyName(ULONG i) {
    switch (i) {
        MAKECASE(PEP_NOTIFY_ACPI_PREPARE_DEVICE)
        MAKECASE(PEP_NOTIFY_ACPI_ABANDON_DEVICE)
        MAKECASE(PEP_NOTIFY_ACPI_REGISTER_DEVICE)
        MAKECASE(PEP_NOTIFY_ACPI_UNREGISTER_DEVICE)
        MAKECASE(PEP_NOTIFY_ACPI_ENUMERATE_DEVICE_NAMESPACE)
        MAKECASE(PEP_NOTIFY_ACPI_QUERY_OBJECT_INFORMATION)
        MAKECASE(PEP_NOTIFY_ACPI_EVALUATE_CONTROL_METHOD)
        MAKECASE(PEP_NOTIFY_ACPI_QUERY_DEVICE_CONTROL_RESOURCES)
        MAKECASE(PEP_NOTIFY_ACPI_TRANSLATED_DEVICE_CONTROL_RESOURCES)
        MAKECASE(PEP_NOTIFY_ACPI_WORK)
        MAKEDEFAULT("PEP ACPI Notify ID")
    }
}

/* Convert Platform state enum into string */
_Use_decl_annotations_
const char* Dbg_GetPlatformStateName(ULONG PlatformState)
{

    switch (PlatformState) {
        MAKECASE(IMX_PEP::PLATFORM_IDLE_STATE_WAIT)
        MAKECASE(IMX_PEP::PLATFORM_IDLE_STATE_STOP_LIGHT)
        MAKECASE(IMX_PEP::PLATFORM_IDLE_STATE_ARM_OFF)
        MAKECASE(IMX_PEP::PLATFORM_IDLE_STATE_COUNT)
        MAKECASE(PEP_PLATFORM_IDLE_STATE_NONE)
        MAKEDEFAULT("PlatformState ID")
    }
}

/* Convert Platform state enum into string */
_Use_decl_annotations_
const char* Dbg_GetProcessorStateName(ULONG ProcessorState)
{
    switch (ProcessorState) {
        MAKECASE(IMX_PEP::CPU_IDLE_STATE_WFI)
        MAKECASE(IMX_PEP::CPU_IDLE_STATE_WFI2)
        MAKECASE(IMX_PEP::CPU_IDLE_STATE_POWER_GATED)
        MAKECASE(IMX_PEP::CPU_IDLE_STATE_COUNT)
        MAKEDEFAULT("ProcessorState ID")
    }
}

_Use_decl_annotations_
const char* Dbg_GetDeviceName(ULONG DeviceId)
{
    switch (DeviceId) {
        MAKECASE(IMX_PEP::_DEVICE_ID::CPU0)
        MAKECASE(IMX_PEP::_DEVICE_ID::CPU1)
        MAKECASE(IMX_PEP::_DEVICE_ID::CPU2)
        MAKECASE(IMX_PEP::_DEVICE_ID::CPU3)
        MAKECASE(IMX_PEP::_DEVICE_ID::PEP0)
        MAKECASE(IMX_PEP::_DEVICE_ID::I2C1)
        MAKECASE(IMX_PEP::_DEVICE_ID::I2C2)
        MAKECASE(IMX_PEP::_DEVICE_ID::I2C3)

        /*MAKECASE(IMX_PEP::_DEVICE_ID::GPT)
        MAKECASE(IMX_PEP::_DEVICE_ID::EPIT1)
        MAKECASE(IMX_PEP::_DEVICE_ID::I2C1)
        MAKECASE(IMX_PEP::_DEVICE_ID::I2C2)
        MAKECASE(IMX_PEP::_DEVICE_ID::I2C3)
        MAKECASE(IMX_PEP::_DEVICE_ID::SPI1)
        MAKECASE(IMX_PEP::_DEVICE_ID::SPI2)
        MAKECASE(IMX_PEP::_DEVICE_ID::SPI3)
        MAKECASE(IMX_PEP::_DEVICE_ID::SPI4)
        MAKECASE(IMX_PEP::_DEVICE_ID::SPI5)
        MAKECASE(IMX_PEP::_DEVICE_ID::UART1)
        MAKECASE(IMX_PEP::_DEVICE_ID::UART2)
        MAKECASE(IMX_PEP::_DEVICE_ID::UART3)
        MAKECASE(IMX_PEP::_DEVICE_ID::UART4)
        MAKECASE(IMX_PEP::_DEVICE_ID::UART5)
        MAKECASE(IMX_PEP::_DEVICE_ID::USDHC1)
        MAKECASE(IMX_PEP::_DEVICE_ID::USDHC2)
        MAKECASE(IMX_PEP::_DEVICE_ID::USDHC3)
        MAKECASE(IMX_PEP::_DEVICE_ID::USDHC4)
        MAKECASE(IMX_PEP::_DEVICE_ID::VPU)
        MAKECASE(IMX_PEP::_DEVICE_ID::SSI1)
        MAKECASE(IMX_PEP::_DEVICE_ID::SSI2)
        MAKECASE(IMX_PEP::_DEVICE_ID::SSI3)
        MAKECASE(IMX_PEP::_DEVICE_ID::ASRC)
        MAKECASE(IMX_PEP::_DEVICE_ID::URS0)
        MAKECASE(IMX_PEP::_DEVICE_ID::USB0)
        MAKECASE(IMX_PEP::_DEVICE_ID::USB1)
        MAKECASE(IMX_PEP::_DEVICE_ID::ENET)
        MAKECASE(IMX_PEP::_DEVICE_ID::GPU)
        MAKECASE(IMX_PEP::_DEVICE_ID::PCI0)
        MAKECASE(IMX_PEP::_DEVICE_ID::GPIO)*/
        MAKECASE(IMX_PEP::_DEVICE_ID::_COUNT)
        MAKEDEFAULT("DeviceID")
    }
}

#endif
